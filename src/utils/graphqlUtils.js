/**
 * This file should not really exist
 * Ideally the contents of this file would live in the ../graphql folder
 * However that folder is currently being generated by Amplify, so the contents would be overwritten
 * @TODO Remove the autogenerated folder and place this code there instead
 */

export const createEmployee = `mutation CreateEmployee(
    $username: String,
    $name: String
    $profileImageUri: String
    $pointCount: Int
    $recognitionCount: Int
    $badgeCount: Int
    $rewardCount: Int
    $yumgivenname: String
    $yumdob: String
    $yumusertype: String
    $yumstoreid: String
    $profileCompletionStatus: Boolean
    $termsAccepted: Boolean
    $userEmailAddress: String
    ){
        createEmployee(input: {
            username: $username,
            name: $name
            profileImageUri: $profileImageUri
            pointCount: $pointCount
            recognitionCount: $recognitionCount
            badgeCount: $badgeCount
            rewardCount: $rewardCount
            yumgivenname: $yumgivenname
            yumdob: $yumdob
            yumusertype: $yumusertype
            yumstoreid: $yumstoreid
            profileCompletionStatus: $profileCompletionStatus
            termsAccepted: $termsAccepted
            userEmailAddress: $userEmailAddress
        })
        {
            id
            username
            name
            __typename
        }
    }
`;

export const updateEmployee = `mutation updateEmployee(
  $id: String
  $name: String
  $userEmailAddress: String
  $profileImageUri: String
  ){
      updateEmployee(input: {
          id: $id,
          name: $name
          profileImageUri: $profileImageUri
          userEmailAddress: $userEmailAddress
      })
      {
          id
          __typename
      }
  }
`;

export const getEmployee = `query($username: String) {
    listEmployees(limit: 1000, filter:{
        username:{
            eq: $username
        }
    })  {
        items
            {
                username
                id
                name
                pointCount
                recognitionCount
                rewardCount
                yumdob
                yumstoreid
                profileImageUri
                userEmailAddress
            }
        }
    }
`;

export const getEmployees = `query {
    listEmployees(limit: 10000){
        items
            {
                username
                id
                name
                pointCount
                recognitionCount
                rewardCount
                yumdob
                yumstoreid
                profileImageUri
                userEmailAddress
            }
        }
    }
`;

export const createFeedback = `mutation(
    $feedbackMessage: String,
    $senderId: String
    ){
        createFeedback(input: {
            feedbackMessage: $feedbackMessage,
            senderId: $senderId
        })
        {
            id
            feedbackMessage     
        }     
    }
`;

export const createBadge = `mutation(
    $name: String
    $receiverName: String
    $receiverId: String
    ){
        createBadge(input: {
            name: $name,
            receiverName: $receiverName
            receiverId: $receiverId
        })
        {
            id 
        }     
    }
`;

export const createRecognition = `
    mutation CreateRecognition
      (
      $completed: Boolean
      $mediaType: MediaType
      $mediaValue: String
      $recognitionMessage: String
      $recognitionValue: String
      $senderName: String
      $senderId: String
      $receiverName: String
      $receiverId: String
      ) {
        createRecognition(input: {
          completed: $completed
          mediaType: $mediaType
          mediaValue: $mediaValue
          recognitionMessage: $recognitionMessage
          recognitionValue: $recognitionValue
          senderName: $senderName
          senderId: $senderId
          receiverName: $receiverName
          receiverId: $receiverId
      })
      {
        id
        completed
        mediaType
        mediaValue
        recognitionValue
        recognitionMessage
        senderName
        senderId
        receiverName
        receiverId
      }
    }
`;

export const listRecognitions = `query {
    listRecognitions{
        items
            {
                id
                senderName
                receiverName
                recognitionMessage
                recognitionValue
                mediaType
                mediaValue
                createdAt
                senderId
                receiverId
                likesRecognition {
                  items {
                    id
                    numberLikes
                    likeOwnerUsername
                    likeOwnerId
                  }
                  nextToken
                }
            }
        }
    }
`;

export const listUserRecognitions = `query($userId: String) {
    listRecognitions(limit: 1000, filter:{
        receiverId:{
            eq: $userId
        }
    }){
        items
            {
                id
                senderName
                recognitionMessage
                recognitionValue
                mediaType
                mediaValue
                senderId
                receiverId
                createdAt
                likesRecognition {
                  items {
                    id
                    numberLikes
                    likeOwnerUsername
                    likeOwnerId
                  }
                  nextToken
                }
            }
        }
    }
`;

// Create a like for a recognition
export const createRecognitionLike = `
  mutation (
    $id:ID!,
    $numberLikes: Int!, 
    $likeOwnerUsername: String!, 
    $likeOwnerId: String!
    ) {
      createRecognitionLike(input:{
      id: $id,
      numberLikes:$numberLikes, 
      likeOwnerId: $likeOwnerId,
      likeOwnerUsername: $likeOwnerUsername
    }) {
      id
      numberLikes
    }
  }
`;

export const listUserSentRecognitions = `query($userId: String) {
    listRecognitions(limit: 1000, filter:{
        senderId:{
            eq: $userId
        }
    }){
        items
            {
                id
                senderName
                recognitionMessage
                recognitionValue
                mediaType
                mediaValue
                senderId
                receiverId
                createdAt
            }
        }
    }
`;

export const listPosts = `
  query {
    listPosts{
      items {
        id
        postOwnerUsername
        postContent
        postOwnerId
        createdAt
        likes {
          items {
            id
            numberLikes
            likeOwnerUsername
            likeOwnerId
          }
        }
      }
    }
  }
`;

// Get a post and all its likes
export const getPost = `query($id:ID!) {
    getPost(id:$id) {
      id
      postOwnerUsername
      postContent
      postOwnerId
      likes {
        items {
          id
          numberLikes
          likeOwnerUsername
          likeOwnerId
        }
      }
    }
  }`;

// Create a post
export const createPost = `
    mutation(
      $postContent: String!, 
      $postOwnerId: String!, 
      $postOwnerUsername: String!
      ) {
      createPost(input:{
        postOwnerUsername: $postOwnerUsername,
        postOwnerId: $postOwnerId,
        postContent: $postContent
      }) {
        id
      }
    }
  `;

// Delete a post
export const deletePost = `
  mutation($id:ID!) {
    deletePost(input:{
      id: $id,
    }) {
      id
    }
  }
`;

// Create a like for a post
export const createLike = `
  mutation (
    $id:ID!,
    $numberLikes: Int!, 
    $likeOwnerUsername: String!, 
    $likeOwnerId: String!
    ) {
    createLike(input:{
      likePostId: $id,
      numberLikes:$numberLikes, 
      likeOwnerId: $likeOwnerId,
      likeOwnerUsername: $likeOwnerUsername
    }) {
      id
      numberLikes
      post {
        id      
        postContent
      }
    }
  }
`;

// Delete a like
export const deleteLike = `
  mutation($id:ID!) {
    deleteLike(input:{
      id: $id,
    }) {
      id
    }
  }
`;

export default {
  createEmployee,
  getEmployee,
  getEmployees,
  createFeedback,
  listRecognitions,
  listUserRecognitions,
  createRecognitionLike
};
